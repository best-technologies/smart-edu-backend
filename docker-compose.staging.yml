services:
  postgres:
    image: pgvector/pgvector:pg15
    container_name: smart-edu-staging-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-smart_edu_staging}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./scripts/backup.sh:/backup.sh:ro
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-smart_edu_staging}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - smart-edu-staging

  redis:
    image: redis:7-alpine
    container_name: smart-edu-staging-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-staging_redis_pass}
    volumes:
      - redis_staging_data:/data
    ports:
      - "${REDIS_PORT:-6380}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - smart-edu-staging

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smart-edu-staging-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-2000}:1000"
    env_file:
      - .env.staging
    environment:
      # Override specific variables for staging Docker environment
      NODE_ENV: staging
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-smart_edu_staging}
      REDIS_URL: redis://:${REDIS_PASSWORD:-staging_redis_pass}@redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:1000/api/v1/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - smart-edu-staging

  nginx:
    image: nginx:alpine
    container_name: smart-edu-staging-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-8080}:80"
      # Uncomment for SSL in staging
      # - "8443:443"
    volumes:
      - ./nginx/nginx.staging.conf:/etc/nginx/nginx.conf:ro
      # Uncomment for SSL certificates
      # - ./ssl/staging:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - smart-edu-staging

  prisma-studio:
    image: node:20-alpine
    container_name: smart-edu-staging-prisma-studio
    restart: unless-stopped
    command: >
      sh -c "npm install -g prisma && 
             npx prisma studio --hostname 0.0.0.0 --port 5556"
    ports:
      - "5556:5556"
    env_file:
      - .env.staging
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-smart_edu_staging}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - smart-edu-staging

  # Staging-specific backup service
  db-backup:
    image: pgvector/pgvector:pg15
    container_name: smart-edu-staging-backup
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-smart_edu_staging}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups/staging:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: >
      sh -c "while true; do
               echo 'Starting scheduled backup...'
               /backup.sh staging
               echo 'Backup completed. Sleeping for 6 hours...'
               sleep 21600
             done"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - smart-edu-staging

volumes:
  postgres_staging_data:
    driver: local
  redis_staging_data:
    driver: local

networks:
  smart-edu-staging:
    driver: bridge
