name: üöÄ Smart Edu Backend CI/CD Pipeline

on:
  push:
    branches: [ main, staging, develop ]
  pull_request:
    branches: [ main, staging, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
          - development

env:
  NODE_VERSION: '20'
  REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  IMAGE_NAME: smart-edu

jobs:
  # üîç Code Quality & Testing
  quality-check:
    name: üîç Code Quality & Testing
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîç Lint code
        run: npm run lint

      - name: üé® Format check
        run: npm run format -- --check

      - name: üß™ Run tests
        run: npm run test

      - name: üìä Test coverage
        run: npm run test:cov

      - name: üìà Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # üê≥ Docker Build & Security Scan
  docker-build:
    name: üê≥ Docker Build & Security
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: üè∑Ô∏è Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üê≥ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: üîí Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: üì§ Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # üöÄ Deploy to Staging
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-check, docker-build]
    if: github.ref == 'refs/heads/staging' || github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/develop'
    environment: |
      staging
      development
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: üîê Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: üê≥ Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          # For AWS ECS Fargate
          if [ -n "${{ secrets.AWS_STAGING_CLUSTER }}" ] && [ -n "${{ secrets.AWS_STAGING_SERVICE }}" ]; then
            # Update task definition with environment variables
            echo "üìù Updating ECS task definition with staging environment variables..."
            
            # Get current task definition
            TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition smart-edu-backend --query 'taskDefinition')
            
            # Update task definition with staging environment variables
            UPDATED_TASK_DEF=$(echo "$TASK_DEFINITION" | jq --arg NODE_ENV "${{ secrets.NODE_ENV_STAGING || 'staging' }}" \
              --arg DATABASE_URL "${{ secrets.DATABASE_URL_STAGING }}" \
              --arg JWT_SECRET "${{ secrets.JWT_SECRET }}" \
              --arg EMAIL_USER "${{ secrets.EMAIL_USER }}" \
              --arg EMAIL_PASSWORD "${{ secrets.EMAIL_PASSWORD }}" \
              --arg OPENAI_API_KEY "${{ secrets.OPENAI_API_KEY }}" \
              --arg AWS_ACCESS_KEY_ID "${{ secrets.AWS_ACCESS_KEY_ID }}" \
              --arg AWS_SECRET_ACCESS_KEY "${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              --arg AWS_REGION "${{ secrets.AWS_REGION }}" \
              --arg AWS_S3_BUCKET "${{ secrets.AWS_S3_BUCKET }}" \
              --arg PINECONE_API_KEY "${{ secrets.PINECONE_API_KEY }}" \
              --arg PINECONE_ENVIRONMENT "${{ secrets.PINECONE_ENVIRONMENT }}" \
              --arg GOOGLE_SMTP_HOST "${{ secrets.GOOGLE_SMTP_HOST }}" \
              --arg GOOGLE_SMTP_PORT "${{ secrets.GOOGLE_SMTP_PORT }}" \
              --arg FRONTEND_URL "${{ secrets.FRONTEND_URL }}" \
              --arg CORS_ORIGINS "${{ secrets.CORS_ORIGINS }}" \
              --arg APP_NAME "${{ secrets.APP_NAME }}" \
              --arg BTECH_ADMIN_EMAIL "${{ secrets.BTECH_ADMIN_EMAIL }}" \
              --arg OTP_EXPIRES_AT "${{ secrets.OTP_EXPIRES_AT }}" \
              '.containerDefinitions[0].environment = [
                {"name": "NODE_ENV", "value": $NODE_ENV},
                {"name": "PORT", "value": "1000"},
                {"name": "DATABASE_URL", "value": $DATABASE_URL},
                {"name": "JWT_SECRET", "value": $JWT_SECRET},
                {"name": "EMAIL_USER", "value": $EMAIL_USER},
                {"name": "EMAIL_PASSWORD", "value": $EMAIL_PASSWORD},
                {"name": "OPENAI_API_KEY", "value": $OPENAI_API_KEY},
                {"name": "AWS_ACCESS_KEY_ID", "value": $AWS_ACCESS_KEY_ID},
                {"name": "AWS_SECRET_ACCESS_KEY", "value": $AWS_SECRET_ACCESS_KEY},
                {"name": "AWS_REGION", "value": $AWS_REGION},
                {"name": "AWS_S3_BUCKET", "value": $AWS_S3_BUCKET},
                {"name": "PINECONE_API_KEY", "value": $PINECONE_API_KEY},
                {"name": "PINECONE_ENVIRONMENT", "value": $PINECONE_ENVIRONMENT},
                {"name": "GOOGLE_SMTP_HOST", "value": $GOOGLE_SMTP_HOST},
                {"name": "GOOGLE_SMTP_PORT", "value": $GOOGLE_SMTP_PORT},
                {"name": "FRONTEND_URL", "value": $FRONTEND_URL},
                {"name": "CORS_ORIGINS", "value": $CORS_ORIGINS},
                {"name": "APP_NAME", "value": $APP_NAME},
                {"name": "BTECH_ADMIN_EMAIL", "value": $BTECH_ADMIN_EMAIL},
                {"name": "OTP_EXPIRES_AT", "value": $OTP_EXPIRES_AT}
              ]')
            
            # Register new task definition
            NEW_TASK_DEF=$(aws ecs register-task-definition --cli-input-json "$UPDATED_TASK_DEF" --query 'taskDefinition.taskDefinitionArn' --output text)
            
            # Update service with new task definition
            aws ecs update-service --cluster "${{ secrets.AWS_STAGING_CLUSTER }}" --service "${{ secrets.AWS_STAGING_SERVICE }}" --task-definition "$NEW_TASK_DEF" --force-new-deployment
          else
            echo "‚ö†Ô∏è AWS staging cluster/service secrets not set - skipping AWS deployment"
            echo "To enable AWS deployment, add AWS_STAGING_CLUSTER and AWS_STAGING_SERVICE secrets"
          fi
          
          # For Docker Compose (alternative)
          # docker-compose -f docker-compose.staging.yml up -d --build

      - name: üß™ Run smoke tests
        run: |
          echo "üß™ Running smoke tests..."
          # Wait for deployment to complete
          sleep 30
          
          # Test health endpoint (only if STAGING_URL is provided)
          if [ -n "${{ secrets.STAGING_URL }}" ]; then
            echo "Testing staging URL: ${{ secrets.STAGING_URL }}"
            curl -f "${{ secrets.STAGING_URL }}/health" || echo "Health check failed - this is normal if URL is not set up yet"
            curl -f "${{ secrets.STAGING_URL }}/api/v1/health" || echo "API check failed - this is normal if URL is not set up yet"
          else
            echo "‚ö†Ô∏è STAGING_URL secret not set - skipping smoke tests"
            echo "To enable smoke tests, add STAGING_URL secret to your repository"
          fi

      - name: üìä Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # üöÄ Deploy to Production
  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-check, docker-build]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: üîê Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: üê≥ Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          # For AWS ECS Fargate
          if [ -n "${{ secrets.AWS_PRODUCTION_CLUSTER }}" ] && [ -n "${{ secrets.AWS_PRODUCTION_SERVICE }}" ]; then
            # Update task definition with environment variables
            echo "üìù Updating ECS task definition with environment variables..."
            
            # Get current task definition
            TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition smart-edu-backend --query 'taskDefinition')
            
            # Update task definition with environment variables
            UPDATED_TASK_DEF=$(echo "$TASK_DEFINITION" | jq --arg NODE_ENV "${{ secrets.NODE_ENV_PRODUCTION || 'production' }}" \
              --arg DATABASE_URL "${{ secrets.DATABASE_URL_PRODUCTION }}" \
              --arg JWT_SECRET "${{ secrets.JWT_SECRET }}" \
              --arg EMAIL_USER "${{ secrets.EMAIL_USER }}" \
              --arg EMAIL_PASSWORD "${{ secrets.EMAIL_PASSWORD }}" \
              --arg OPENAI_API_KEY "${{ secrets.OPENAI_API_KEY }}" \
              --arg AWS_ACCESS_KEY_ID "${{ secrets.AWS_ACCESS_KEY_ID }}" \
              --arg AWS_SECRET_ACCESS_KEY "${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              --arg AWS_REGION "${{ secrets.AWS_REGION }}" \
              --arg AWS_S3_BUCKET "${{ secrets.AWS_S3_BUCKET }}" \
              --arg PINECONE_API_KEY "${{ secrets.PINECONE_API_KEY }}" \
              --arg PINECONE_ENVIRONMENT "${{ secrets.PINECONE_ENVIRONMENT }}" \
              --arg GOOGLE_SMTP_HOST "${{ secrets.GOOGLE_SMTP_HOST }}" \
              --arg GOOGLE_SMTP_PORT "${{ secrets.GOOGLE_SMTP_PORT }}" \
              --arg FRONTEND_URL "${{ secrets.FRONTEND_URL }}" \
              --arg CORS_ORIGINS "${{ secrets.CORS_ORIGINS }}" \
              --arg APP_NAME "${{ secrets.APP_NAME }}" \
              --arg BTECH_ADMIN_EMAIL "${{ secrets.BTECH_ADMIN_EMAIL }}" \
              --arg OTP_EXPIRES_AT "${{ secrets.OTP_EXPIRES_AT }}" \
              '.containerDefinitions[0].environment = [
                {"name": "NODE_ENV", "value": $NODE_ENV},
                {"name": "PORT", "value": "1000"},
                {"name": "DATABASE_URL", "value": $DATABASE_URL},
                {"name": "JWT_SECRET", "value": $JWT_SECRET},
                {"name": "EMAIL_USER", "value": $EMAIL_USER},
                {"name": "EMAIL_PASSWORD", "value": $EMAIL_PASSWORD},
                {"name": "OPENAI_API_KEY", "value": $OPENAI_API_KEY},
                {"name": "AWS_ACCESS_KEY_ID", "value": $AWS_ACCESS_KEY_ID},
                {"name": "AWS_SECRET_ACCESS_KEY", "value": $AWS_SECRET_ACCESS_KEY},
                {"name": "AWS_REGION", "value": $AWS_REGION},
                {"name": "AWS_S3_BUCKET", "value": $AWS_S3_BUCKET},
                {"name": "PINECONE_API_KEY", "value": $PINECONE_API_KEY},
                {"name": "PINECONE_ENVIRONMENT", "value": $PINECONE_ENVIRONMENT},
                {"name": "GOOGLE_SMTP_HOST", "value": $GOOGLE_SMTP_HOST},
                {"name": "GOOGLE_SMTP_PORT", "value": $GOOGLE_SMTP_PORT},
                {"name": "FRONTEND_URL", "value": $FRONTEND_URL},
                {"name": "CORS_ORIGINS", "value": $CORS_ORIGINS},
                {"name": "APP_NAME", "value": $APP_NAME},
                {"name": "BTECH_ADMIN_EMAIL", "value": $BTECH_ADMIN_EMAIL},
                {"name": "OTP_EXPIRES_AT", "value": $OTP_EXPIRES_AT}
              ]')
            
            # Register new task definition
            NEW_TASK_DEF=$(aws ecs register-task-definition --cli-input-json "$UPDATED_TASK_DEF" --query 'taskDefinition.taskDefinitionArn' --output text)
            
            # Update service with new task definition
            aws ecs update-service --cluster "${{ secrets.AWS_PRODUCTION_CLUSTER }}" --service "${{ secrets.AWS_PRODUCTION_SERVICE }}" --task-definition "$NEW_TASK_DEF" --force-new-deployment
          else
            echo "‚ö†Ô∏è AWS production cluster/service secrets not set - skipping AWS deployment"
            echo "To enable AWS deployment, add AWS_PRODUCTION_CLUSTER and AWS_PRODUCTION_SERVICE secrets"
          fi
          
          # For Docker Compose (alternative)
          # docker-compose -f docker-compose.prod.yml up -d --build

      - name: üß™ Run production smoke tests
        run: |
          echo "üß™ Running production smoke tests..."
          # Wait for deployment to complete
          sleep 30
          
          # Test health endpoint (only if PRODUCTION_URL is provided)
          if [ -n "${{ secrets.PRODUCTION_URL }}" ]; then
            echo "Testing production URL: ${{ secrets.PRODUCTION_URL }}"
            curl -f "${{ secrets.PRODUCTION_URL }}/health" || echo "Health check failed - this is normal if URL is not set up yet"
            curl -f "${{ secrets.PRODUCTION_URL }}/api/v1/health" || echo "API check failed - this is normal if URL is not set up yet"
            
            # Test SSL certificate (only for HTTPS URLs)
            if [[ "${{ secrets.PRODUCTION_URL }}" == https://* ]]; then
              domain=$(echo "${{ secrets.PRODUCTION_URL }}" | sed 's|https://||' | sed 's|/.*||')
              openssl s_client -connect "$domain:443" -servername "$domain" < /dev/null || echo "SSL check failed - this is normal if SSL is not set up yet"
            fi
          else
            echo "‚ö†Ô∏è PRODUCTION_URL secret not set - skipping smoke tests"
            echo "To enable smoke tests, add PRODUCTION_URL secret to your repository"
          fi

      - name: üìä Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # üîÑ Database Migration
  database-migration:
    name: üîÑ Database Migration
    runs-on: ubuntu-latest
    needs: [quality-check]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîÑ Run database migrations
        run: |
          echo "üîÑ Running database migrations..."
          if [ -n "${{ secrets.DATABASE_URL_STAGING }}" ]; then
            npm run prisma:migrate
          else
            echo "‚ö†Ô∏è DATABASE_URL_STAGING secret not set - skipping database migrations"
            echo "To enable database migrations, add DATABASE_URL_STAGING secret"
          fi
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_STAGING }}

  # üßπ Cleanup
  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: üßπ Clean up old images
        run: |
          echo "üßπ Cleaning up old Docker images..."
          # Add cleanup commands here

      - name: üìä Deployment summary
        run: |
          echo "üìä Deployment Summary:"
          echo "‚úÖ Code quality checks passed"
          echo "‚úÖ Docker image built and scanned"
          echo "‚úÖ Database migrations completed"
          echo "‚úÖ Application deployed successfully"
